package arrays;

import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;
// import java.util.Arrays;

public class KthLargest215L {

    //Approach-1 [Add elements in ArrayList and remove the max element k times]
    public static int findKthLargestApproach1(int[] nums, int k) {
        ArrayList<Integer> list = new ArrayList<Integer>();
        if (k > nums.length) {
            return -1;
        }
        // else if(k==nums.length){
        // // return Arrays.stream(nums);
        // }
        for (int i = 0; i < nums.length; i++) {
            list.add(nums[i]);
        }
        Integer max = 0;
        for (; k > 0; k--) {
            max = Collections.max(list);
            list.remove(max);
        }
        return max;
    }

    //Approach- 2 [make a array of size k and add the elements in ascending order with last element of the karray is the answer
    public static int findKthLargestApproach2(int[] nums, int k) {
        if(k>nums.length){
            return -1;
        }
        int[] kArr = new int[k + 1];
        int max1 = Integer.MIN_VALUE;
        int storeindex = 0;
        for (int j = 0; j < nums.length; j++) {
            if (max1 < nums[j]) {
                storeindex = j;
                max1 = nums[j];
            }
        }
        kArr[0] = storeindex;
        for (int i = 1; i < kArr.length; k++) {
            int max2 = Integer.MIN_VALUE;
            for (int l = 0; l < nums.length; l++) {
                if (nums[l] > max2) {
                    max2 = nums[l];
                    if (nums[kArr[i - 1]] > max2) {
                        kArr[i] = l;
                    } else if (nums[kArr[i - 1]] == max2 && kArr[i - 1] != l) {
                        kArr[i] = l;
                    }
                }
            }

        }
        return kArr[kArr.length - 1];
    }

    // Approach-3 [Naive Sort the array and retur arr.length-k element]
    static int findKthLargestApproach3(int[] nums,int k){
        ArrayList<Integer> list = new ArrayList<Integer>();
        if (k > nums.length) {
            return -1;
        }
        
        for (int i = 0; i < nums.length; i++) {
            list.add(nums[i]);
        }
        Collections.sort(list);
        return list.get(list.size()-k);
    }


    // Approach - 4 [Using PriorityQueue and taking it as a min-heap]
    public int findKthLargestApproach4(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int i = 0; i < k; i++) {
            minHeap.offer(nums[i]);
        }
        
        for (int i = k; i < nums.length; i++) {
            if (nums[i] > minHeap.peek()) {
                minHeap.poll();
                minHeap.offer(nums[i]);
            }
        }
        
        return minHeap.peek();
    }

    public static void main(String[] args) {

        int n = findKthLargestApproach3(new int[] { 205,-4676,-6584,6477,-116,4203,245,9196,9183,-9775,998,-7334,2933,-4808,-6745,4707,-3206,3336,-3151,-7843,1158,5596,-8026,1164,-7629,6311,-8953,7954,-4980,5411,-9695,9536,-3620,-1391,3390,-9186,-8599,-2486,-9464,-2732,-8817,5719,-7352,-7353,2211,9400,8,9706,-3937,-6286,1237,6504,-562,3763,2165,-653,-1148,5402,6237,3269,-1213,6031,-6300,5877,9621,-9635,1410,8246,-2091,-7371,-9954,2866,9180,2122,7226,-7372,7310,2894,4428,430,-5044,-8730,-9169,5559,2675,4366,6288,-6682,-363,5515,3621,-1574,-9920,240,-1477,722,5709,7808,6720,1134,1083,6658,-5798,-635,-9056,-4819,4786,6785,-4674,-310,9399,-8844,-584,-8027,-707,-3900,-6879,-1211,-917,-5086,7776,4757,-2665,-6119,2965,7215,-3131,9043,9502,5444,-2751,-2503,5108,4397,7109,2015,3394,4729,-1590,9024,-9204,2494,-4427,-1476,2882,3862,4812,-1361,3037,7258,-5370,4759,-2284,-2871,-7502,-7442,4224,-9688,-9800,6243,7749,623,-1391,8102,-4539,-1157,-9260,-8030,9369,-99,9022,3748,-4569,-2933,-1117,2489,9028,-3478,-2545,7900,4555,9654,3623,-1816,-5526,2410,7525,-147,-3407,-713,8434,-292,4652,392,-4795,5549,4954,9471,4745,-9004,-2620,4517,-2042,-6222,469,4501,-392,1180,6475,-2443,-5346,-2660,-7010,-9374,5246,-8452,6010,-4477,-8724,4442,-2603,4722,8447,-4455,-313,-34,-2161,1773,3100,-3129,1041,6009,4943,-8992,102,-9401,8464,-1465,8309,-6356,-5294,4843,8426,-4321,3000,5838,-8521,-3088,7835,9261,-3980,3957,-6418,9743,-7372,8759,-555,3070,-9790,-5545,-3472,3538,8040,-1681,-2012,3560,-525,-671,406,-6117,-251,7400,8095,6284,-8217,7369,-5153,-9411,-5825,-7243,6923,-5006,-4169,-9346,5908,6268,3303,-3791,7648,680,9654,2130,7082,-9905,-2944,1823,-4382,-9779,-1045,-3088,-451,-6623,-7361,6734,-9231,-6628,2274,5963,7927,3700,-8009,-3148,-2718,998,-8933,-3044,1971,-8073,1514,9788,-8112,-2801,-1863,-4209,-5861,9903,-7362,-4747,-6460,-4485,894,2995,-4047,-6605,-5627,7753,7054,3339,-8455,3300,-4169,6441,-189,7843,-5553,-3015,-807,609,5074,-3735,7798,5388,2081,-6036,2184,3672,-3182,-3459,7424,4442,-3324,-794,3583,9965,-8974,9850,3517,-5791,-7022,-7776,-2097,8349,7742,1679,5624,-4967,8965,5373,-1627,8569,5834,7409,39,2747,8012,6172,-6033,5694,5339,8963,-2412,-3344,-3145,-2483,7692,-6006,-9495,9116,5908,-4596,9892,-9069,-7106,2289,-6335,4636,5677,4121,7040,-4971,8369,4906,3348,5524,-2893,1782,-6170,-5776,-7772,-4622,6641,9628,-8235,-1726,1771,-9800,-4337,-8558,-1489,-534,-6758,3233,4506,9086,8690,-1597,3567,8898,-7685,-7548,9557,-4083,-576,9450,-4735,-6305,7288,2545,-2430,6377,-2087,-1756,4170,7500,5535,3498,-3587,8449,3985,8376,6362,9031,-2393,-6099,-3838,7087,9602,-8054,-3612,6666,5759,595,2178,-7368,-5065,-8517,5820,-4309,4527,1232,7119,8747,-9374,3108,5462,-2793,-7709,1389,637,5771,-5504,1548,2413,-1988,-1685,-8994,3652,-2996,-7518,-5320,-3018,-6026,-2683,1994,5765,9031,-4747,-3678,-9377,8862,-2514,-5020,-9508,-1280,-6695,9441,-2034,-4543,-648,-8869,3677,6252,-3933,-4134,-3827,7554,5723,8501,3344,-2037,4353,-8770,-7503,7235,-6371,2826,7185,-7402,7099,650,-5174,-4615,-6998,3804,6292,-3827,4353,8964,5117,-5840,4371,9536,-5334,3546,-7952,80,-6344,3701,7919,2609,-2980,-243,-5699,-8178,-6649,2201,-7376,-8427,-4874,-5965,6037,6613,-866,8074,-4764,-5495,8530,-1855,-8213,-8502,-9444,4717,3809,-9908,3112,8270,-2852,8026,4882,-3677,-9174,-3329,-5044,5385,2630,6361,-639,-3038,-3177,5387,-1041,-1931,-2779,-7193,1303,-6496,-615,-8909,7158,-9890,-3458,6691,-5391,1739,1406,-1559,2751,-1590,-3689,1901,8812,4651,-6442,5086,359,-8822,-1021,1513,-3321,-3436,6151,9403,5218,-7006,-1487,2839,3489,-4624,8665,8755,-6727,9430,-6989,-2338,-12,-702,-8681,8994,1247,-7288,7421,98,9998,5733,5802,4805,-2111,5189,-4793,-9285,2543,1362,3491,-625,-148,-7071,-8857,7401,7831,789,-8121,8269,-2849,4212,-1310,5145,-2269,7364,5045,-1394,9093,1234,-7886,7508,7831,-2249,-2386,-5116,5233,-5981,3934,-5916,9032,7038,2782,-7971,-5838,-5318,5779,-2485,-200,4952,4858,-3577,1156,-8791,6970,1296,-1525,8961,-1928,-585,6457,-2954,6215,-2705,6732,6441,-9781,8796,-9304,-3179,-3952,5913,269,-3236,4847,3012,1094,-5879,-1669,6760,-5259,-3508,2017,-5907,5767,6747,4336,6622,4696,-6125,3661,-4885,-1675,448,9146,5342,-4317,2823,6411,4645,-6233,4159,8814,6683,-8092,-5149,-1467,-6887,-1331,1368,8728,-5036,-6638,5846,49,9006,-6189,1932,-1992,-4200,43,287,5169,-957,1516,77,8058,1536,3897,6158,-8271,7023,-1228,9795,-2917,-469,-7648,-6899,-2762,-7980,-5905,-4925,-9729,9168,7347,-4687,8746,-2589,-1723,2614,6715,-8824,-2003,982,-8339,-9352,2243,4424,-5796,9769,-5738,-5313,-1635,5302,2070,-7710,2907,-1798,-9142,7160,9019,9489,-2346,7942,-8496,-513,9825,-168,1903,-918,-2323,7808,1201,4669,9793,8510,-6885,2278,-5454,4059,-1744,2344,-6725,6860,-6881,-8439,3154,-290,7760,448,5548,9180,2283,549,-9594,795,-3752,4679,-5586,-337,8837,4484,7267,7189,5255,-2538,3091,-1490,4677,-9756,-6530,6241,-3815,-2071,6618,2492,5991,5566,-3725,3766,259,6409,1054,-2897,-5310,6001,-1271,1003,-956,1238,2551,-32,-930,-2677,-1266,9416,4672,-7273,5928,7251,1948,6319,7177,7691,-5588,2723,-1988,7973,952,3654,-9711,-1083,-2664,9882,-2372,2722,-691,2734,-7550,9079,8262,-3549,-9472,5377,4877,4150,1505,6951,1420,-4171,-21,-2387,-797,-6013,9003,-1932,6610,385,79,-2326,-8269,3200,2346,3342,-3727,5561,6699,6196,9651,6738,-470,8992,-2823,-288,-6690,-5216,6486,-1130,-4749,8477,94,8195,-6485,-2256,1711,7990,1525,6227,-9428,-7677,-1770,4902,84,4363,8551,-4708,-8106,-2906,-6686,-282,2915,-4284,6481,-8068,-1521,-254,-8476,-3927,7580,7511,-1954,-3102,-8421,5257,7637,-6597,-9829,-8344,3824,8432,-3550,-8618,-3778,9968,1967,8700,-9336,-2025,6683,5883,-8051,3575,1005,3286,6642,-5644,4953,796,8712,8080,5074,2315,-5266,610,-2611,2493,-5849,-4083,6200,6181,-5658,1989,-7491,3450,-8846,-9167,-1816,8991,-7996,8197,3997,-7077,4540,-3422,-6210,-5988,3321,-9192,-6531,-9752,-7194,-4882,1333,-2843,-7256,6750,-5862,-7323,9212,-8219,3061,4390,1651,5471,-4687,1242,5635,7633,7908,4108,9178,8608,985,397,-2849,-8907,1687,9864,8291,-2146,3400,6202,-9855,-7093,-2787,3855,-9835,2744,8239,-6257,1994,-105,-4499,-8680,-6090,-9993,8629,9775,7447,-7231,-4266,7170,-4655,6575,7393,296,-5733,-360,3848,2991,629,-7986,8612,5419,2336,-7556,-6753,752,-2846,-1985,3430,-6827,-8139,-9341,-2777,-9851,2277,3671,8331,-9774,-4977,4145,-433,-2631,-8536,6087,-9709,-1123,-212,-2664,-9362,8199,9164,5968,-8344,-2867,-5893,-4632,399,-6687,-644,-3565,8306,8347,3122,9162,-1431,992,6627,8930,-5850,-7378,-2664,2161,1680,6677,3566,-3628,-2723,-1677,-6111,7963,4195,-3369,-4206,6789,6375,1284,-5636,-7500,2170,-980,-3091,-7831,-5775,-5250,-5776,-421,2736,-2103,-4925,-617,-4773,4156,2320,-6531,205,7518,8456,8608,5492,1185,8153,-441,912,-2,6719,6222,-5637,9961,6814,-6117,7210,-7777,1760,-9645,4159,6827,6490,9611,4676,-8353,-6427,-78,4806,-4802,-472,1248,-7138,5195,7990,1277,7642,176,8069,-9833,-9199,8674,9723,8381,-6719,-4822,1161,-3048,4374,-7162,5613,5720,2502,6068,2494,4221,-1894,-5174,3873,9608,-8687,5158,3886,7255,860,5516,679,-7150,-5465,-9683,9313,2994,2466,-917,-9478,7797,-4579,-5540,1866,8657,-314,3172,-8245,-3757,-2598,780,6530,6919,-2778,33,2868,-2214,-9377,-5372,2771,5231,1055,-16,-9051,-4637,760,5343,-8298,-9867,1624,-4480,8722,-8427,3809,-8210,8627,-2825,-289,1911,3185,-1050,1401,1059,9204,6513,-9388,-763,7617,-6446,-5291,9967,-3808,42,5307,2650,-4208,-7753,3937,-7000,1942,-3540,-4411,8927,8014,2582,-7413,-459,-825,-240,9287,7650,-6344,1005,-51,9719,768,6577,8681,-4348,5439,7084,-1415,1264,-8877,-6954,-8679,5183,-5332,-4553,-7506,7316,2013,-8992,6016,-6622,2700,-1514,5246,5020,3828,1935,-3123,6155,3784,9794,-8791,-2908,-3700,-9320,-48,-2388,4824,-4061,8117,3723,-9730,2906,218,7347,888,-2379,531,8981,9833,7389,-1977,8279,-7124,-2441,-7065,4025,9596,-9683,-3821,-7012,6924,-7939,7400,-4781,6407,-7873,4841,9916,136,-8132,5851,776,-7028,-5571,-3352,3337,5989,5390,-5114,-8099,9110,9247,-8453,2164,3634,8397,-4147,1376,-2399,-1895,7734,-5316,1250,1253,-3149,1917,-1779,3669,7860,-946,-8514,-7323,-7323,8910,9761,6730,-5301,-9468,7036,9166,4942,8940,-3291,-9488,7174,4123,-1937,1488,2118,-7590,2885,1430,9055,-4911,-6183,-5899,-7452,1787,-5116,7304,2599,-1517,2312,617,3200,7018,2695,-479,4707,7198,780,-7448,126,8941,7516,-5093,3891,8095,1075,297,4029,4366,-9586,-3309,-4274,-2582,-7974,-8012,-2338,-5716,-9864,1502,6956,-214,6060,6528,-8702,1728,2979,-725,2973,3705,-2086,-4738,-9387,290,-8427,-1503,5377,-8246,1201,9556,-5315,-3951,-2968,-1556,2723,-9423,1308,3356,2523,7771,-6099,4555,9828,2237,4813,-5954,-3224,-1462,8409,-7264,905,-1568,-2450,3928,4986,9231,-2322,2197,6542,1043,-7670,-5889,4015,-5831,7635,8615,9704,-476,3493,3492,8737,3060,-8274,-566,5109,7971,-8130,9325,1724,-4420,4310,-8552,9885,1675,9747,-1914,7859,-2903,9477,2458,787,7026,-1625,-7147,2852,-9211,9959,-3614,5440,-2998,3656,2577,-1347,6948,-5953,-5009,-5679,-2918,1744,62,6639,-169,68,-1721,-9259,6950,699,3912,7298,-3701,-8126,3213,8673,-6802,9423,8732,2521,320,-2429,-1321,7663,-8055,-612,-6300,894,-4365,7933,6038,-6641,9641,9944,8318,-9259,8674,-2443,-9914,3830,-8979,307,-3962,6462,-6372,3522,-1324,-4774,-2617,5958,5059,2858,2531,-9586,1647,-3729,6848,7568,-5173,1782,4073,6588,-7897,277,827,-1105,9570,1548,9762,5406,-7721,-414,-4825,-2275,1568,3352,-341,-7032,5092,946,6732,-699,6925,-947,5653,-6330,-7169,4813,-291,9637,7445,-5384,6720,4575,8278,-744,-6089,4328,-5840,-7445,2285,-8294,-5695,-3017,2522,4426,-3200,4874,-9810,7865,1385,-8668,-4704,-7775,6346,-3850,3428,2840,-1348,-3068,3604,-6215,8517,3908,-9263,-1637,2171,1613,7142,-2547,-3179,-1542,2238,5948,7756,4258,-7460,-9632,9808,354,8304,8365,1449,-4603,2714,5323,-7262,-9399,-3891,7083,-3372,-2615,-7389,-2196,-943,-5924,994,3563,2789,-8123,1193,-2497,-574,-1499,-6719,6419,-7518,-1732,-5633,-1158,-3025,-1028,9761,7193,2730,-6708,-2033,943,-9879,-4849,1279,4227,5111,2794,8295,-7968,-5632,-8896,-4662 }, 35);
        System.out.println(n);
    }
}
